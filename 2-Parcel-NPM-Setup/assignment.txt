**Question1 =  What is `NPM`?**

**answer** = *"NPM, or Node Package Manager, is a package manager for JavaScript. It allows developers to access a huge collection of pre-written code modules (packages) that can be easily integrated into their projects. This saves time and effort by providing reusable components instead of writing everything from scratch.”*

**Question2 =  What is `Parcel`? Why do we need it?**

**answer** = *"Parcel is a zero-configuration bundler for JavaScript used in web development. It streamlines the process by automatically bundling your project's JavaScript, CSS, and other assets into a single file that the browser can easily load. This eliminates the need for manual configuration and improves the overall performance of your web application.”*

**Question3 =  What is `.parcel-cache`?**

**answer** =  ".parcel-cache" is a directory created by Parcel, the JavaScript bundler. It acts as a **cache** to store information about your project's files and their dependencies. This cached information helps Parcel **rebuild your project efficiently** by only processing files that have actually changed, rather than re-analyzing everything from scratch on every run."

**Question4 =  What is `npx` ?**

**answer** =  *"npx, short for Node Package Execute, is a tool included with npm. It allows you to directly execute **executable programs** provided by packages in the npm registry. This is particularly helpful because you can run these programs **without having to install the entire package** first. This makes NPX ideal for one-time commands or experimenting with new packages before integrating them into your project."*

**Question5 =  What is difference between `dependencies` vs `devDependencies`?**

**answer** =  *"In `package.json`, dependencies are essential libraries your application needs to **run in production**.  devDependencies are tools and libraries **used only during development** for tasks like testing and building. Separating them keeps your production build efficient and your project well-organized."*

**Question6 =  What is Tree Shaking?**

**answer** =  *"Tree Shaking is an optimization technique in JavaScript bundlers that eliminates **unused code** from the final bundle. It analyzes your application's imports and exports to identify code that's never used and removes it. This results in a smaller bundle size, leading to faster loading times and improved performance for your web application."*

**Question7 =  What is Hot Module Replacement?**

**answer** =  *"Hot Module Replacement (HMR) is a development tool that enables you to update your application code **without a full page reload**. When you make code changes, HMR injects the updated code directly into the running application, allowing you to see the changes reflected almost instantly. This significantly speeds up development by eliminating the need for frequent refreshes and helps preserve application state."*

**Question8 =  List down your favourite 5 superpowers of Parcel and describe any 3 of them in your own words.** 

**answer** = *5 superpower of Parcel will be Bundling, Hot Module Replacement (HMR), Minification, Three Shaking, File watcher algorith*m.

**Bundling**: *Parcel bundle our code to make it small in size so that our app loading time will be reduced.*

***Tree Shaking:** Parcel watches all the files in our project and keep track of import and export. So that if some lines of code is not really coming in use it will remove it that way our page will load faster.*

**Minification:**  *Parcel minified our code for example it make some of our variable name small by its own to make it short to reduce the loading time of our Application.*

**Question9 =  - What is `.gitignore`? What should we add and not add into it?**

**answer** = "**`*.gitignore`** is a file in a Git repository that tells Git which files to ignore. It's useful for excluding files specific to your development environment, temporary files, or sensitive information. Typically, you wouldn't ignore your core source code or large assets, as Git excels at tracking those.”*

**Question10 =   What is the difference between `package.json` and `package-lock.json`**

**answer** =  *"**`package.json`**" acts as the main project configuration file, specifying project details, scripts, and dependencies with version ranges.  On the other hand, "**`package-lock.json`**" is generated by npm and locks down the exact versions of all installed dependencies, ensuring consistent and reproducible installations across different environments."*

**Question11 =  Why should I not modify `package-lock.json`?**

**answer** =  *"It's generally recommended to avoid modifying `package-lock.json` manually. This file is automatically generated by npm to ensure consistent dependency installations.  Manually editing it can disrupt this process and potentially lead to inconsistencies or version conflicts.  Instead, manage your dependencies through `package.json`, and let npm handle the version locking in `package-lock.json`."*

**Question12 =  What is `node_modules` ? Is it a good idea to push that on git?**

**answer** = 

> *"***`node_modules`** *is a folder that stores all the external JavaScript libraries (dependencies) your project relies on. These dependencies are installed using npm (Node Package Manager). While important for running the project,  we typically don't push node modules to Git for two reasons:*
> 
1. ***Large Size:** `node_modules` can become quite large, especially for complex projects. Including it significantly increases the repository size and slows down cloning for collaborators.*
2. ***Version Control Redundancy:** The dependencies and their versions are already specified in `package.json`. Git tracks `package.json`, so there's no need to duplicate that information with a large `node_modules` folder.*

*By adding `.node_modules` to `.gitignore`, we keep the Git repository lean and ensure everyone can easily set up the project's dependencies by running `npm install` after cloning."*

**Question13 =  What is the `dist` folder?**

answer =  *"The `dist` folder, short for 'distribution,' serves as the output directory for your application's production-ready files. This folder contains the optimized and minified version of your codebase that's prepared for deployment to a web server or any other hosting environment."*

**Question14 =  What is `browserlists`?**

**answer** = *"Browserslist is a configuration file that helps developers specify which web browsers their project should support. It allows you to target specific browser versions or ranges for compatibility. This is important because different browsers support modern JavaScript features at different paces. Browserslist helps you find a balance between supporting a wide range of browsers and keeping your application's bundle size efficient.”*

## Read About:

***●Read about dif bundlers: vite, webpack, parcel
● Read about: ^ - caret and ~ - tilda
● Read about Script types in html (MDN Docs)***